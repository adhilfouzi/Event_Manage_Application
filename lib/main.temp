import 'package:flutter/material.dart';
import 'package:project_event/screen/Body/widget/Scaffold/app_bar.dart';
import 'package:table_calendar/table_calendar.dart';

class Calender extends StatefulWidget {
  const Calender({super.key});

  @override
  State<Calender> createState() => _CalenderState();
}

class _CalenderState extends State<Calender> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;
  
  Map<DateTime, List<Event>> event = {};
  TextEditingController eventcontroller = TextEditingController();
  late final ValueNotifier<List<Event>> _selectedEvents;
  @override
  void initState() {
    super.initState();
    _selectedDay = _focusedDay;
    _selectedEvents = ValueNotifier(_getEventforDay(_selectedDay!));
  }

  List<Event> _getEventforDay(DateTime day) {
    return event[day] ?? [];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: const CustomAppBar(actions: [], titleText: ''),
      body: Column(children: [
        Container(
          // color: Color.fromARGB(255, 237, 237, 237),
          margin: const EdgeInsets.all(10),
          child: TableCalendar(
            firstDay: DateTime(2000, 10, 1),
            lastDay: DateTime.utc(2100, 12, 31),
            focusedDay: _focusedDay,
            selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
            calendarFormat: _calendarFormat,
            startingDayOfWeek: StartingDayOfWeek.monday,
            eventLoader: _getEventforDay,
            onDaySelected: (selectedDay, focusedDay) {
              if (!isSameDay(_selectedDay, selectedDay)) {
                setState(() {
                  _selectedDay = selectedDay;
                  _focusedDay = focusedDay;
                  _selectedEvents.value = _getEventforDay(selectedDay);
                });
              }
            },
            calendarStyle: const CalendarStyle(outsideDaysVisible: false),
            onFormatChanged: (format) {
              if (_calendarFormat != format) {
                setState(() {
                  _calendarFormat = format;
                });
              }
            },
            onPageChanged: (focusedDay) {
              // No need to call `setState()` here
              _focusedDay = focusedDay;
            },
            availableGestures: AvailableGestures.all,
            daysOfWeekStyle: const DaysOfWeekStyle(
                weekendStyle: TextStyle(color: Colors.red),
                weekdayStyle: TextStyle(color: Colors.black)),
            weekendDays: const [DateTime.sunday],
          ),
        ),
        const SizedBox(
          height: 8,
        ),
        Expanded(
          child: ValueListenableBuilder<List<Event>>(
            valueListenable: _selectedEvents,
            builder: (context, value, child) {
              return ListView.builder(
                itemCount: value.length,
                itemBuilder: (context, index) {
                  final data = value[index];
                  return Container(
                    margin:
                        const EdgeInsets.symmetric(horizontal: 14, vertical: 4),
                    decoration: BoxDecoration(
                      border: Border.all(),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: ListTile(
                      onTap: () {},
                      title: Text(data.titile),
                    ),
                  );
                },
              );
            },
          ),
        ),
      ]),
      floatingActionButton: FloatingActionButton(
          onPressed: () {
            showDialog(
                context: context,
                builder: (context) {
                  return AlertDialog(
                    scrollable: true,
                    title: const Text('Event Name'),
                    content: TextField(
                      controller: eventcontroller,
                    ),
                    actions: [
                      ElevatedButton(
                          onPressed: () {
                            event.addAll({
                              _selectedDay!: [Event(eventcontroller.text)]
                            });
                            Navigator.of(context).pop();
                            _selectedEvents.value =
                                _getEventforDay(_selectedDay!);
                            setState(() {
                              eventcontroller.clear();
                            });
                          },
                          child: const Text('Submit'))
                    ],
                  );
                });
          },
          child: const Icon(Icons.add)),
    );
  }
}

class Event {
  final String titile;
  Event(this.titile);
}
